<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.springframework.samples.service.service</groupId>
	<artifactId>MyExampleMicroService</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<properties>

		<!-- Generic properties -->
		<java.version>1.8</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- Jetty -->
		<jetty.version>9.3.0.M2</jetty.version>

		<!-- Spring -->
		<spring-framework.version>4.1.6.RELEASE</spring-framework.version>

		<!-- Jersey -->
		<spring-jersey.version>2.17</spring-jersey.version>
		<jersey.version>2.17</jersey.version>

		<!-- RxJava -->
		<rxjava.version>1.0.9</rxjava.version>

		<!-- Hystrix -->
		<hystrix.version>1.4.5</hystrix.version>

		<!-- Logging -->
		<logback.version>1.1.3</logback.version>
		<slf4j.version>1.7.12</slf4j.version>
		<bean-utils.version>1.9.1</bean-utils.version>

		<!-- Test -->
		<junit.version>4.12</junit.version>
		<failsafe.version>2.18.1</failsafe.version>

		<!-- RAML tester -->
		<raml-tester.version>0.0.12</raml-tester.version>

		<!-- Jackson JSON -->
		<jackson.version>2.17</jackson.version>
		<jackson-annotation.version>2.5.3</jackson-annotation.version>

		<!-- Maven compiler -->
		<maven-compiler.version>3.3</maven-compiler.version>

	</properties>

	<dependencies>

		<!-- Spring MVC -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>

		<!-- Spring and Transactions -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>

		<!-- Jetty -->
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-server</artifactId>
			<version>${jetty.version}</version>
		</dependency>

		<!-- Spring Jersey -->
		<dependency>
			<groupId>org.glassfish.jersey.ext</groupId>
			<artifactId>jersey-spring3</artifactId>
			<version>${spring-jersey.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-web</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-beans</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.ext.rx</groupId>
			<artifactId>jersey-rx-client-java8</artifactId>
			<version>${jersey.version}</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.ext.rx</groupId>
			<artifactId>jersey-rx-client-rxjava</artifactId>
			<version>${jersey.version}</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet</artifactId>
			<version>${jersey.version}</version>
		</dependency>


		<dependency>
			<groupId>org.glassfish</groupId>
			<artifactId>javax.servlet</artifactId>
			<version>3.0</version>
			<scope>provided</scope>
		</dependency>

		<!-- RxJava -->
		<dependency>
			<groupId>io.reactivex</groupId>
			<artifactId>rxjava</artifactId>
			<version>${rxjava.version}</version>
		</dependency>

		<!-- Hystrix -->
		<dependency>
			<groupId>com.netflix.hystrix</groupId>
			<artifactId>hystrix-core</artifactId>
			<version>${hystrix.version}</version>
		</dependency>

		<!-- Logging with SLF4J & LogBack -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>${bean-utils.version}</version>
		</dependency>

		<!-- Test Artifacts -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring-framework.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- <dependency> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-failsafe-plugin</artifactId> 
			<version>${failsafe.version}</version> </dependency> -->
		<!-- RAML Tester 
		<dependency>
			<groupId>guru.nidi.raml</groupId>
			<artifactId>raml-tester</artifactId>
			<version>${raml-tester.version}</version>
		</dependency>
-->

		<!-- Jackson JSON -->
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-json-jackson</artifactId>
			<version>${jackson.version}</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>${jackson-annotation.version}</version>
		</dependency>


		<!-- RAML to JAX-RS <dependency> <groupId>org.raml.plugins</groupId> <artifactId>raml-jaxrs-maven-plugin</artifactId> 
			<version>1.3.3</version> </dependency> -->
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${jetty.version}</version>
				<configuration>
					<scanIntervalSeconds>10</scanIntervalSeconds>
					<connectors>
						<connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
							<port>8088</port>
						</connector>
					</connectors>
					<stopPort>8088</stopPort>
					<stopKey>STOP</stopKey>
				</configuration>
				<executions>
					<execution>
						<id>start-jetty</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>stop</goal>
							<goal>start</goal>
						</goals>
						<configuration>
							<scanIntervalSeconds>0</scanIntervalSeconds>
							<daemon>true</daemon>
						</configuration>
					</execution>
					<execution>
						<id>stop-jetty</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${failsafe.version}</version>
				<executions>
					<execution>
						<id>integration-test</id>
						<goals>
							<goal>integration-test</goal>
						</goals>
					</execution>
					<execution>
						<id>verify</id>
						<goals>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- <plugin> <groupId>org.raml.plugins</groupId> <artifactId>raml-jaxrs-maven-plugin</artifactId> 
				<version>1.3.3</version> <configuration> Use sourcePaths if you want to provide 
				a single RAML file or a list of RAML files <sourceDirectory>${basedir}/src/main/resources/raml</sourceDirectory> 
				<outputDirectory>${project.build.directory}/generated-sources/raml-JAX-RS</outputDirectory> 
				Optionally configure outputDirectory if you don't like the default value: 
				${project.build.directory}/generated-sources/raml-JAX-RS Replace with your 
				package name <basePackageName>org.test</basePackageName> Valid values: 1.1 
				2.0 <JAX-RSVersion>2.0</JAX-RSVersion> <useJsr303Annotations>false</useJsr303Annotations> 
				Valid values: jackson1 jackson2 gson none <jsonMapper>jackson2</jsonMapper> 
				<removeOldOutput>true</removeOldOutput> Optionally set extensions to a list 
				of fully qualified names of classes that implement org.raml.jaxrs.codegen.core.ext.GeneratorExtension 
				for example: <extensions> <param>com.abc.AuthorizationAnnotationExtension</param> 
				<param>com.abc.ParameterFilterExtension</param> </extensions> Custom annotator 
				for json schema to pojo convertor <customAnnotator>com.abc.MyCustomAnnotator</customAnnotator> 
				</configuration> <executions> <execution> <goals> <goal>generate</goal> </goals> 
				<phase>generate-sources</phase> </execution> </executions> </plugin> -->


		</plugins>
	</build>

</project>
